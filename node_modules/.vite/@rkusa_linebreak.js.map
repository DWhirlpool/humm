{
  "version": 3,
  "sources": ["../tiny-inflate/index.js", "../unicode-trie/index.js", "../@rkusa/linebreak/src/classes.js", "../@rkusa/linebreak/src/pairs.js", "../@rkusa/linebreak/src/linebreaker.js", "dep:@rkusa_linebreak"],
  "sourcesContent": ["var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);   /* table of code length counts */\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  \n  this.dest = dest;\n  this.destLen = 0;\n  \n  this.ltree = new Tree();  /* dynamic length/symbol tree */\n  this.dtree = new Tree();  /* dynamic distance tree */\n}\n\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n\n/* extra bits and base tables for length codes */\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n\n/* extra bits and base tables for distance codes */\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n\n/* special ordering of code length codes */\nvar clcidx = new Uint8Array([\n  16, 17, 18, 0, 8, 7, 9, 6,\n  10, 5, 11, 4, 12, 3, 13, 2,\n  14, 1, 15\n]);\n\n/* used by tinf_decode_trees, avoids allocations every call */\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n\n  /* build bits table */\n  for (i = 0; i < delta; ++i) bits[i] = 0;\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n\n  /* build base table */\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n\n/* build the fixed huffman trees */\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n\n  /* build fixed length tree */\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n\n  /* build fixed distance tree */\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n}\n\n/* given an array of code lengths, build a tree */\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n\n  /* clear code length count table */\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\n\n  /* scan symbol lengths, and sum code length counts */\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n  t.table[0] = 0;\n\n  /* compute offset table for distribution sort */\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n\n  /* create code->symbol translation table (symbols sorted by code) */\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n  }\n}\n\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n\n  /* shift bit out of tag */\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n\n  return bit;\n}\n\n/* read a num bit value from a stream and add base */\nfunction tinf_read_bits(d, num, base) {\n  if (!num)\n    return base;\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & (0xffff >>> (16 - num));\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n\n/* given a data stream and a tree, decode a symbol */\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n  \n  var sum = 0, cur = 0, len = 0;\n  var tag = d.tag;\n\n  /* get more bits while code value is above sum */\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n  \n  d.tag = tag;\n  d.bitcount -= len;\n\n  return t.trans[sum + cur];\n}\n\n/* given a data stream, decode dynamic trees from it */\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n\n  /* get 5 bits HLIT (257-286) */\n  hlit = tinf_read_bits(d, 5, 257);\n\n  /* get 5 bits HDIST (1-32) */\n  hdist = tinf_read_bits(d, 5, 1);\n\n  /* get 4 bits HCLEN (4-19) */\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\n\n  /* read code lengths for code length alphabet */\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n\n  /* build code length tree */\n  tinf_build_tree(code_tree, lengths, 0, 19);\n\n  /* decode code lengths for the dynamic trees */\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n        break;\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n\n  /* build dynamic trees */\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n\n    /* check for end of block */\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n\n      sym -= 257;\n\n      /* possibly get more bits from length code */\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n      dist = tinf_decode_symbol(d, dt);\n\n      /* possibly get more bits from distance code */\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n      /* copy match */\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n\n/* inflate an uncompressed block of data */\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  \n  /* unread from bitbuffer */\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n\n  /* get length */\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n\n  /* get one's complement of length */\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n  /* check length */\n  if (length !== (~invlength & 0x0000ffff))\n    return TINF_DATA_ERROR;\n\n  d.sourceIndex += 4;\n\n  /* copy block */\n  for (i = length; i; --i)\n    d.dest[d.destLen++] = d.source[d.sourceIndex++];\n\n  /* make sure we start next block on a byte boundary */\n  d.bitcount = 0;\n\n  return TINF_OK;\n}\n\n/* inflate stream from source to dest */\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n\n    /* read block type (2 bits) */\n    btype = tinf_read_bits(d, 2, 0);\n\n    /* decompress block */\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK)\n      throw new Error('Data error');\n\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function')\n      return d.dest.slice(0, d.destLen);\n    else\n      return d.dest.subarray(0, d.destLen);\n  }\n  \n  return d.dest;\n}\n\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\ntinf_build_fixed_trees(sltree, sdtree);\n\n/* build extra bits and base tables */\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n/* fix a special case */\nlength_bits[28] = 0;\nlength_base[28] = 258;\n\nmodule.exports = tinf_uncompress;\n", "// Generated by CoffeeScript 1.7.1\nvar UnicodeTrie, inflate;\n\ninflate = require('tiny-inflate');\n\nUnicodeTrie = (function() {\n  var DATA_BLOCK_LENGTH, DATA_GRANULARITY, DATA_MASK, INDEX_1_OFFSET, INDEX_2_BLOCK_LENGTH, INDEX_2_BMP_LENGTH, INDEX_2_MASK, INDEX_SHIFT, LSCP_INDEX_2_LENGTH, LSCP_INDEX_2_OFFSET, OMITTED_BMP_INDEX_1_LENGTH, SHIFT_1, SHIFT_1_2, SHIFT_2, UTF8_2B_INDEX_2_LENGTH, UTF8_2B_INDEX_2_OFFSET;\n\n  SHIFT_1 = 6 + 5;\n\n  SHIFT_2 = 5;\n\n  SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n  OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n  INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n  INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n  INDEX_SHIFT = 2;\n\n  DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n  DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n  LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\n\n  LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n  INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n  UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\n\n  UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;\n\n  INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n  DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\n  function UnicodeTrie(data) {\n    var isBuffer, uncompressedLength, view;\n    isBuffer = typeof data.readUInt32BE === 'function' && typeof data.slice === 'function';\n    if (isBuffer || data instanceof Uint8Array) {\n      if (isBuffer) {\n        this.highStart = data.readUInt32BE(0);\n        this.errorValue = data.readUInt32BE(4);\n        uncompressedLength = data.readUInt32BE(8);\n        data = data.slice(12);\n      } else {\n        view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0);\n        this.errorValue = view.getUint32(4);\n        uncompressedLength = view.getUint32(8);\n        data = data.subarray(12);\n      }\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      this.data = new Uint32Array(data.buffer);\n    } else {\n      this.data = data.data, this.highStart = data.highStart, this.errorValue = data.errorValue;\n    }\n  }\n\n  UnicodeTrie.prototype.get = function(codePoint) {\n    var index;\n    if (codePoint < 0 || codePoint > 0x10ffff) {\n      return this.errorValue;\n    }\n    if (codePoint < 0xd800 || (codePoint > 0xdbff && codePoint <= 0xffff)) {\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n    if (codePoint <= 0xffff) {\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n    if (codePoint < this.highStart) {\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n    return this.data[this.data.length - DATA_GRANULARITY];\n  };\n\n  return UnicodeTrie;\n\n})();\n\nmodule.exports = UnicodeTrie;\n", "// The following break classes are handled by the pair table\nexports.OP = 0   // Opening punctuation\nexports.CL = 1   // Closing punctuation\nexports.CP = 2   // Closing parenthesis\nexports.QU = 3   // Ambiguous quotation\nexports.GL = 4   // Glue\nexports.NS = 5   // Non-starters\nexports.EX = 6   // Exclamation/Interrogation\nexports.SY = 7   // Symbols allowing break after\nexports.IS = 8   // Infix separator\nexports.PR = 9   // Prefix\nexports.PO = 10  // Postfix\nexports.NU = 11  // Numeric\nexports.AL = 12  // Alphabetic\nexports.HL = 13  // Hebrew Letter\nexports.ID = 14  // Ideographic\nexports.IN = 15  // Inseparable characters\nexports.HY = 16  // Hyphen\nexports.BA = 17  // Break after\nexports.BB = 18  // Break before\nexports.B2 = 19  // Break on either side (but not pair)\nexports.ZW = 20  // Zero-width space\nexports.CM = 21  // Combining marks\nexports.WJ = 22  // Word joiner\nexports.H2 = 23  // Hangul LV\nexports.H3 = 24  // Hangul LVT\nexports.JL = 25  // Hangul L Jamo\nexports.JV = 26  // Hangul V Jamo\nexports.JT = 27  // Hangul T Jamo\nexports.RI = 28  // Regional Indicator\n\n// The following break classes are not handled by the pair table\nexports.AI = 29  // Ambiguous (Alphabetic or Ideograph)\nexports.BK = 30  // Break (mandatory)\nexports.CB = 31  // Contingent break\nexports.CJ = 32  // Conditional Japanese Starter\nexports.CR = 33  // Carriage return\nexports.LF = 34  // Line feed\nexports.NL = 35  // Next line\nexports.SA = 36  // South-East Asian\nexports.SG = 37  // Surrogates\nexports.SP = 38  // Space\nexports.XX = 39  // Unknown\n", "const DI_BRK = exports.DI_BRK = 0 // Direct break opportunity\nconst IN_BRK = exports.IN_BRK = 1 // Indirect break opportunity\nconst CI_BRK = exports.CI_BRK = 2 // Indirect break opportunity for combining marks\nconst CP_BRK = exports.CP_BRK = 3 // Prohibited break for combining marks\nconst PR_BRK = exports.PR_BRK = 4 // Prohibited break\n\n// table generated from http://www.unicode.org/reports/tr14/#Table2\nexports.pairTable = [\n  [PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, CP_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK],\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK],\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, PR_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK],\n  [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK],\n  [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK],\n]", "'use strict'\n\nconst UnicodeTrie = require('unicode-trie')\nconst ref = require('./classes')\nconst { BK, CR, LF, NL, CB, BA, SP, WJ, AI, AL, SA, SG, XX, CJ, ID, NS, characterClasses} = require('./classes')\nconst { DI_BRK, IN_BRK, CI_BRK, CP_BRK, PR_BRK, pairTable } = require('./pairs')\n\nconst classTrie = new UnicodeTrie(hex2ab(require('./classes.json').buf))\n\nclass Break {\n  constructor(position, required) {\n    this.position = position\n    this.required = required != null ? required : false\n  }\n}\n\nmodule.exports = class LineBreaker {\n  constructor(string) {\n    this.string = string\n    this.pos = 0\n    this.lastPos = 0\n    this.curClass = null\n    this.nextClass = null\n  }\n\n  nextCodePoint() {\n    const code = this.string.charCodeAt(this.pos++)\n    const next = this.string.charCodeAt(this.pos)\n\n    // If a surrogate pair\n    if ((0xd800 <= code && code <= 0xdbff) && (0xdc00 <= next && next <= 0xdfff)) {\n      this.pos++\n      return ((code - 0xd800) * 0x400) + (next - 0xdc00) + 0x10000\n    }\n\n    return code\n  }\n\n  nextCharClass(first) {\n    if (first == null) {\n      first = false\n    }\n    return mapClass(classTrie.get(this.nextCodePoint()))\n  }\n\n  nextBreak() {\n    // get the first char if we're at the beginning of the string\n    if (this.curClass == null) {\n      this.curClass = mapFirst(this.nextCharClass())\n    }\n\n    while (this.pos < this.string.length) {\n      this.lastPos = this.pos\n      const lastClass = this.nextClass\n      this.nextClass = this.nextCharClass()\n\n      // explicit newline\n      if (this.curClass === BK || (this.curClass === CR && this.nextClass !== LF)) {\n        this.curClass = mapFirst(mapClass(this.nextClass))\n        return new Break(this.lastPos, true)\n      }\n\n      // handle classes not handled by the pair table\n      let cur = null\n      switch (this.nextClass) {\n        case SP:\n          cur = this.curClass\n          break\n        case BK:\n        case LF:\n        case NL:\n          cur = BK\n          break\n        case CR:\n          cur = CR\n          break\n        case CB:\n          cur = BA\n          break\n      }\n\n      if (cur != null) {\n        this.curClass = cur\n        if (this.nextClass === CB) {\n          return new Break(this.lastPos)\n        }\n        continue\n      }\n\n      // if not handled already, use the pair table\n      let shouldBreak = false\n      switch (pairTable[this.curClass][this.nextClass]) {\n        case DI_BRK: // Direct break\n          shouldBreak = true\n          break\n        case IN_BRK: // possible indirect break\n          shouldBreak = lastClass === SP\n          break\n        case CI_BRK: // prohibited for combining marks\n          shouldBreak = lastClass === SP\n          if (!shouldBreak) {\n            continue\n          }\n          break\n        case CP_BRK:\n          if (lastClass !== SP) {\n            continue\n          }\n      }\n\n      this.curClass = this.nextClass\n      if (shouldBreak) {\n        return new Break(this.lastPos)\n      }\n    }\n\n    if (this.pos >= this.string.length) {\n      if (this.lastPos < this.string.length) {\n        this.lastPos = this.string.length\n        return new Break(this.string.length)\n      } else {\n        return null\n      }\n    }\n  }\n}\n\nfunction mapClass(c) {\n  switch (c) {\n    case AI:\n      return AL\n    case SA:\n    case SG:\n    case XX:\n      return AL\n    case CJ:\n      return NS\n    default:\n      return c\n  }\n}\n\nfunction mapFirst(c) {\n  switch (c) {\n    case LF:\n    case NL:\n      return BK\n    case CB:\n      return BA\n    case SP:\n      return WJ\n    default:\n      return c\n  }\n}\n\nfunction hex2ab(hex) {\n  const view = new Uint8Array(hex.length / 2)\n\n  for (let i = 0; i < hex.length; i += 2) {\n    view[i / 2] = parseInt(hex.substring(i, i + 2), 16)\n  }\n\n  return view\n}\n", "export default require(\"./node_modules/@rkusa/linebreak/src/linebreaker.js\");"],
  "mappings": "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CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,IACjO,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AAAA;AAAA;;;;;;;;ACpCnO;AAAA;AAEA,MAAM,cAAc;AACpB,MAAM,MAAM;AACZ,MAAM,CAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,oBAAoB;AAC5F,MAAM,CAAE,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,aAAc;AAE9D,MAAM,YAAY,IAAI,YAAY,OAAO,mBAA0B;AAEnE,oBAAY;AAAA,IACV,YAAY,UAAU,UAAU;AAC9B,WAAK,WAAW;AAChB,WAAK,WAAW,YAAY,OAAO,WAAW;AAAA;AAAA;AAIlD,SAAO,UAAU,kBAAkB;AAAA,IACjC,YAAY,QAAQ;AAClB,WAAK,SAAS;AACd,WAAK,MAAM;AACX,WAAK,UAAU;AACf,WAAK,WAAW;AAChB,WAAK,YAAY;AAAA;AAAA,IAGnB,gBAAgB;AACd,YAAM,OAAO,KAAK,OAAO,WAAW,KAAK;AACzC,YAAM,OAAO,KAAK,OAAO,WAAW,KAAK;AAGzC,UAAK,SAAU,QAAQ,QAAQ,SAAY,UAAU,QAAQ,QAAQ,QAAS;AAC5E,aAAK;AACL,eAAS,QAAO,SAAU,OAAU,QAAO,SAAU;AAAA;AAGvD,aAAO;AAAA;AAAA,IAGT,cAAc,OAAO;AACnB,UAAI,SAAS,MAAM;AACjB,gBAAQ;AAAA;AAEV,aAAO,SAAS,UAAU,IAAI,KAAK;AAAA;AAAA,IAGrC,YAAY;AAEV,UAAI,KAAK,YAAY,MAAM;AACzB,aAAK,WAAW,SAAS,KAAK;AAAA;AAGhC,aAAO,KAAK,MAAM,KAAK,OAAO,QAAQ;AACpC,aAAK,UAAU,KAAK;AACpB,cAAM,YAAY,KAAK;AACvB,aAAK,YAAY,KAAK;AAGtB,YAAI,KAAK,aAAa,MAAO,KAAK,aAAa,MAAM,KAAK,cAAc,IAAK;AAC3E,eAAK,WAAW,SAAS,SAAS,KAAK;AACvC,iBAAO,IAAI,MAAM,KAAK,SAAS;AAAA;AAIjC,YAAI,MAAM;AACV,gBAAQ,KAAK;AAAA,eACN;AACH,kBAAM,KAAK;AACX;AAAA,eACG;AAAA,eACA;AAAA,eACA;AACH,kBAAM;AACN;AAAA,eACG;AACH,kBAAM;AACN;AAAA,eACG;AACH,kBAAM;AACN;AAAA;AAGJ,YAAI,OAAO,MAAM;AACf,eAAK,WAAW;AAChB,cAAI,KAAK,cAAc,IAAI;AACzB,mBAAO,IAAI,MAAM,KAAK;AAAA;AAExB;AAAA;AAIF,YAAI,cAAc;AAClB,gBAAQ,UAAU,KAAK,UAAU,KAAK;AAAA,eAC/B;AACH,0BAAc;AACd;AAAA,eACG;AACH,0BAAc,cAAc;AAC5B;AAAA,eACG;AACH,0BAAc,cAAc;AAC5B,gBAAI,CAAC,aAAa;AAChB;AAAA;AAEF;AAAA,eACG;AACH,gBAAI,cAAc,IAAI;AACpB;AAAA;AAAA;AAIN,aAAK,WAAW,KAAK;AACrB,YAAI,aAAa;AACf,iBAAO,IAAI,MAAM,KAAK;AAAA;AAAA;AAI1B,UAAI,KAAK,OAAO,KAAK,OAAO,QAAQ;AAClC,YAAI,KAAK,UAAU,KAAK,OAAO,QAAQ;AACrC,eAAK,UAAU,KAAK,OAAO;AAC3B,iBAAO,IAAI,MAAM,KAAK,OAAO;AAAA,eACxB;AACL,iBAAO;AAAA;AAAA;AAAA;AAAA;AAMf,oBAAkB,GAAG;AACnB,YAAQ;AAAA,WACD;AACH,eAAO;AAAA,WACJ;AAAA,WACA;AAAA,WACA;AACH,eAAO;AAAA,WACJ;AACH,eAAO;AAAA;AAEP,eAAO;AAAA;AAAA;AAIb,oBAAkB,GAAG;AACnB,YAAQ;AAAA,WACD;AAAA,WACA;AACH,eAAO;AAAA,WACJ;AACH,eAAO;AAAA,WACJ;AACH,eAAO;AAAA;AAEP,eAAO;AAAA;AAAA;AAIb,kBAAgB,KAAK;AACnB,UAAM,OAAO,IAAI,WAAW,IAAI,SAAS;AAEzC,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,GAAG;AACtC,WAAK,IAAI,KAAK,SAAS,IAAI,UAAU,GAAG,IAAI,IAAI;AAAA;AAGlD,WAAO;AAAA;AAAA;;;ACnKT,IAAO,0BAAQ;",
  "names": []
}
