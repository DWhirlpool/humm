// node_modules/tinykeys/dist/tinykeys.module.js
var e = ["Shift", "Meta", "Alt", "Control"];
var t = typeof navigator == "object" && /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? "Meta" : "Control";
function tinykeys_module_default(n, o) {
  var r = Object.keys(o).map(function(e2) {
    return [(n2 = e2, n2.trim().split(" ").map(function(e3) {
      var n3 = e3.split(/\b\+/), o2 = n3.pop();
      return [n3 = n3.map(function(e4) {
        return e4 === "$mod" ? t : e4;
      }), o2];
    })), o[e2]];
    var n2;
  }), i = new Map(), a = null, u = function(t2) {
    t2 instanceof KeyboardEvent && (r.forEach(function(n2) {
      var o2 = n2[0], r2 = n2[1], a2 = i.get(o2) || o2;
      !function(t3, n3) {
        return !(n3[1].toUpperCase() !== t3.key.toUpperCase() && n3[1] !== t3.code || n3[0].find(function(e2) {
          return !t3.getModifierState(e2);
        }) || e.find(function(e2) {
          return !n3[0].includes(e2) && n3[1] !== e2 && t3.getModifierState(e2);
        }));
      }(t2, a2[0]) ? t2.getModifierState(t2.key) || i.delete(o2) : a2.length > 1 ? i.set(o2, a2.slice(1)) : (i.delete(o2), r2(t2));
    }), a && clearTimeout(a), a = setTimeout(i.clear.bind(i), 1e3));
  };
  return n.addEventListener("keydown", u), function() {
    n.removeEventListener("keydown", u);
  };
}

// dep:tinykeys
var tinykeys_default = tinykeys_module_default;
export {
  tinykeys_default as default
};
//# sourceMappingURL=tinykeys.js.map
